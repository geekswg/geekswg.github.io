(()=>{var b=new function(){this.isLocal=window.location.href.startsWith("http://localhost")||window.location.href.startsWith("http://127.0.0.1"),this.baiduPush=()=>{var t=document.createElement("script"),n=window.location.protocol.split(":")[0];n==="https"?t.src="https://zz.bdstatic.com/linksubmit/push.js":t.src="http://push.zhanzhang.baidu.com/push.js";var e=document.getElementsByTagName("script")[0];return e.parentNode.insertBefore(t,e),this},this.baiduStatistics=()=>{var t=t||[],n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?d25f1e053205bf07562f33365fef04d7";var e=document.getElementsByTagName("script")[0];return e.parentNode.insertBefore(n,e),this},this.consoleInfo=()=>{var t={log:function(n,e){e=e??"color:#fff7d3;background-color:#ff4f49;font-size:12px;",console.log("%c%s",e,n)},green:function(n,e){e=e??"color:#fff7d3;background-color:#33a600;font-size:12px;",console.log("%c%s",e,n)},blue:function(n,e){e=e??"color:#fff7d3;background-color:#00768f;font-size:12px;",console.log("%c%s",e,n)},violet:function(n,e){e=e??"color:#fff7d3;background-color:#79008f;font-size:12px;padding:10px;",console.log("%c%s",e,n)},img:function(n,e,a){e=e??"100px",a=a??"100px",console.log("%c  ","background-image:url("+n+");line-height:"+a+";font-size:"+e+";background-size: contain;")}};return t.violet(` Talk is cheap, Show me the code. 
                       --Linux \u7684\u521B\u59CB\u4EBA Linus Torvalds `),console.log("%c \u6BD5\u5C11\u4FA0 | https://geekswg.github.io %c e-mail: mailto://geekswg@qq.com %c","color: #FF0000; background: #4bffba; padding:5px 0; border-radius: 5px 5px 5px 5px;","background: #fadfa3; padding:5px 0; border-radius: 5px 5px 5px 5px;",""),t.blue(`____________________________________________
                      /                     
----__----__----__---/-__---__-----------__-
  /   ) /___) /___) /(     (_ \`| /| /  /   )
_(___/_(___ _(___ _/___\\__(__)_|/_|/__(___/_
    /                                    /  
(_ /                                 (_ /   
\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`),t.img("http://geekswg.js.cool/images/avatar.png","264px","100px"),this},this.setHomePageAvatarBackgroundImg=()=>{try{if(!document.querySelector(".home .home-profile .home-avatar"))return;document.querySelector(".home .home-profile .home-avatar").style="background-image:url(https://raw.githubusercontent.com/geekswg/geekswg/snake/snake.svg);-moz-background-size:100% 100%; background-size: 100% 100%;"}catch(t){console.log(t)}},this.RIP=(t,n,e)=>{t=t??"--- \u6C89\u75DB\u54C0\u60BC ---",e=e??1,n=n??new Date("2022/12/03 00:00:00");var a=new Date(n.getTime()+e*24*60*60*1e3);return nowTime=new Date,nowTime>n&&nowTime<a&&(console.log("\u5F00\u59CB=>"+n+`
`+t+`
\u7ED3\u675F=>`+a),document.querySelector("html").style.filter="grayscale(100%)"),this},this.getRandomComment=()=>{fetch("https://api.uomg.com/api/comments.163?mid=2414158210").then(t=>t.json()).then(t=>{document.querySelector(".pic-backdrop").style.backgroundImage=`url(${t.data.picurl.slice(5)})`;let n=document.querySelector(".comment-avatar");n.alt=`${t.data.nickname}'s avatar`,n.src=t.data.avatarurl.slice(5),n.classList.remove("d-none"),document.querySelector(".comment-nickname").innerHTML=t.data.nickname,document.querySelector(".comment-content").innerHTML=t.data.content.replace(`
`,"<br/>"),document.querySelector(".music-name").innerHTML=t.data.name,document.querySelector(".artists-name").innerHTML=t.data.artistsname;let e=document.createElement("meting-js");e.setAttribute("auto",t.data.url),e.setAttribute("autoplay","true"),e.setAttribute("fixed","true"),e.setAttribute("list-folded","false");let a=document.querySelector(".netease-music");a.innerHTML="",a.appendChild(e)})},this.initRandomComment=()=>{if(!(!document.querySelector(".netease-music")||!document.querySelector(".comment-163")))return this.getRandomComment(),document.querySelector(".comment-163").addEventListener("click",()=>{this.getRandomComment()}),this},this.init=()=>(this.isLocal||this.baiduStatistics().baiduPush(),this.RIP(),this.consoleInfo(),L(),k(),this)};b.init(),document.addEventListener("DOMContentLoaded",()=>{}),window.addEventListener("load",()=>{b.setHomePageAvatarBackgroundImg()});function k(){console.log("\u521D\u59CB\u5316-autSetTitle() => "+document.title);var t=document.title,n;document.addEventListener("visibilitychange",function(){document.hidden?(document.title=" \u{1F602}\u53BB\u54EA\u91CC\u4E86\uFF01",clearTimeout(n)):(document.title=" \u{1F60D}\u6B22\u8FCE\u56DE\u6765\uFF01",n=setTimeout(function(){document.title=t},2e3))})}function L(){console.log("\u521D\u59CB\u5316\u9F20\u6807\u7279\u6548-clickEffect!");let t=[],n=!1,e,a=0,h,m,s,c,l,_=["#F73859","#14FFEC","#00E0FF","#FF99FE","#FAF15D"],r=document.createElement("canvas");document.body.appendChild(r),r.setAttribute("style","width: 100%; height: 100%; top: 0; left: 0; z-index: 99999; position: fixed; pointer-events: none;");let f=document.createElement("span");f.classList.add("pointer"),document.body.appendChild(f),r.getContext&&window.addEventListener?(l=r.getContext("2d"),g(),window.addEventListener("resize",g,!1),w(),window.addEventListener("mousedown",function(i){p(d(10,20),i.clientX,i.clientY),document.body.classList.add("is-pressed"),e=setTimeout(function(){document.body.classList.add("is-longpress"),n=!0},500)},!1),window.addEventListener("mouseup",function(i){clearInterval(e),n==!0&&(document.body.classList.remove("is-longpress"),p(d(50+Math.ceil(a),100+Math.ceil(a)),i.clientX,i.clientY),n=!1),document.body.classList.remove("is-pressed")},!1),window.addEventListener("mousemove",function(i){let o=i.clientX,u=i.clientY;f.style.top=u+"px",f.style.left=o+"px"},!1)):console.log("canvas or addEventListener is unsupported!");function g(){r.width=window.innerWidth*2,r.height=window.innerHeight*2,r.style.width=window.innerWidth+"px",r.style.height=window.innerHeight+"px",l.scale(2,2),h=r.width=window.innerWidth,m=r.height=window.innerHeight,s={x:h/2,y:m/2},c={x:h/2,y:m/2}}class y{constructor(o=s.x,u=s.y){this.x=o,this.y=u,this.angle=Math.PI*2*Math.random(),n==!0?this.multiplier=d(14+a,15+a):this.multiplier=d(6,12),this.vx=(this.multiplier+Math.random()*.5)*Math.cos(this.angle),this.vy=(this.multiplier+Math.random()*.5)*Math.sin(this.angle),this.r=d(8,12)+3*Math.random(),this.color=_[Math.floor(Math.random()*_.length)]}update(){this.x+=this.vx-c.x,this.y+=this.vy-c.y,c.x=-2/window.innerWidth*Math.sin(this.angle),c.y=-2/window.innerHeight*Math.cos(this.angle),this.r-=.3,this.vx*=.9,this.vy*=.9}}function p(i=1,o=s.x,u=s.y){for(let v=0;v<i;v++)t.push(new y(o,u))}function d(i,o){return Math.floor(Math.random()*o)+i}function w(){l.fillStyle="rgba(255, 255, 255, 0)",l.clearRect(0,0,r.width,r.height);for(let i=0;i<t.length;i++){let o=t[i];o.r<0||(l.fillStyle=o.color,l.beginPath(),l.arc(o.x,o.y,o.r,0,Math.PI*2,!1),l.fill(),o.update())}n==!0?a+=.2:!n&&a>=0&&(a-=.4),x(),requestAnimationFrame(w)}function x(){for(let i=0;i<t.length;i++){let o=t[i];(o.x+o.r<0||o.x-o.r>h||o.y+o.r<0||o.y-o.r>m||o.r<0)&&t.splice(i,1)}}}})();
//# sourceMappingURL=data:application/json;base64,
